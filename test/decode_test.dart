library eth_abi_codec_test.decode_tests;

import 'package:test/test.dart';
import 'package:convert/convert.dart';
import 'package:typed_data/typed_buffers.dart';
import 'package:eth_abi_codec/eth_abi_codec.dart';

import 'dart:typed_data';

Uint8Buffer prepareBuffer(List<String> hexInputs) {
  var buffer = new Uint8Buffer();
  buffer.addAll(hex.decode(hexInputs.join()));
  return buffer;
}

dynamic runDecode(String type, List<String> hexInputs) {
  var buffer = prepareBuffer(hexInputs);
  return decodeType(type, buffer);
}

void main() {
  test('uint256 test', () {
    var r1 = runDecode('uint256', ['0000000000000000000000000000000000000000000000000000000000000001']);
    expect((r1 as BigInt).toInt(), 1);

    var r2 = runDecode('uint256', ['0000000000000000000000000000000000000000000000000000000000000005']);
    expect((r2 as BigInt).toInt(), 5);
  });

  test('int256 test', () {
    var r1 = runDecode('int256', ['0000000000000000000000000000000000000000000000000000000000000001']);
    expect((r1 as BigInt).toInt(), 1);

    var r2 = runDecode('int256', ['0000000000000000000000000000000000000000000000000000000000000005']);
    expect((r2 as BigInt).toInt(), 5);
  });

  test('bool test', () {
    var r1 = runDecode('bool', ['0000000000000000000000000000000000000000000000000000000000000001']);
    expect(r1, true);
    var r2 = runDecode('bool', ['0000000000000000000000000000000000000000000000000000000000000000']);
    expect(r2, false);

    expect(() => runDecode('bool', ['0000000000000000000000000000000000000000000000000000000000000002']), throwsException);
  });
  
  test('string test', () {
    var r1 = runDecode('string', [
      '0000000000000000000000000000000000000000000000000000000000000003',
      '6f6e650000000000000000000000000000000000000000000000000000000000'
    ]);
    expect((r1 as String), "one");

    var r2 = runDecode('string', [
      '0000000000000000000000000000000000000000000000000000000000000005',
      '7468726565000000000000000000000000000000000000000000000000000000'
    ]);
    expect((r2 as String), "three");
  });

  test('address test', () {
    var r1 = runDecode('address', [
      '000000000000000000000000d0a1e359811322d97991e03f863a0c30c2cf029c'
    ]);
    expect((r1 as String), "d0a1e359811322d97991e03f863a0c30c2cf029c");
  });

  test('fixed length bytes test', () {
    var r1 = runDecode('bytes32', ['c8485cc9d9d6e082fbf95eedb54a338198ce7dbbd24795ad2d8548b27d07b342']);
    expect(r1 as Uint8List,
      Uint8List.fromList([0xc8,0x48,0x5c,0xc9,0xd9,0xd6,0xe0,0x82,0xfb,0xf9,0x5e,0xed,0xb5,0x4a,0x33,0x81,0x98,0xce,0x7d,0xbb,0xd2,0x47,0x95,0xad,0x2d,0x85,0x48,0xb2,0x7d,0x07,0xb3,0x42]));
    
    var r2 = runDecode('bytes24', ['c8485cc9d9d6e082fbf95eedb54a338198ce7dbbd24795ad0000000000000000']);
    expect(r2 as Uint8List,
      Uint8List.fromList([0xc8,0x48,0x5c,0xc9,0xd9,0xd6,0xe0,0x82,0xfb,0xf9,0x5e,0xed,0xb5,0x4a,0x33,0x81,0x98,0xce,0x7d,0xbb,0xd2,0x47,0x95,0xad]));
  });

  test('static list test', () {
    var r1 = runDecode('(uint256[4],uint256)', [
      '0000000000000000000000000000000000000000000000000000000000000001',
      '0000000000000000000000000000000000000000000000000000000000000002',
      '0000000000000000000000000000000000000000000000000000000000000003',
      '0000000000000000000000000000000000000000000000000000000000000004',
      '0000000000000000000000000000000000000000000000000000000000000005'
    ]);
    expect((r1 as List).length, 2);
    expect(r1[0][0].toInt(), 1);
    expect(r1[0][1].toInt(), 2);
    expect(r1[0][2].toInt(), 3);
    expect(r1[0][3].toInt(), 4);
    expect(r1[1].toInt(), 5);
  });

  test('test mixin of dynamic and static headers', () {
    var r1 = runDecode('(string[],uint128[6],address[],uint256[2])', [
      '0000000000000000000000000000000000000000000000000000000000000140', // relocate of string[] = 320bytes
      '0000000000000000000000000000000000000000000000000000000000000001', // uint128[6]
      '0000000000000000000000000000000000000000000000000000000000000002',
      '0000000000000000000000000000000000000000000000000000000000000003',
      '0000000000000000000000000000000000000000000000000000000000000004',
      '0000000000000000000000000000000000000000000000000000000000000005',
      '0000000000000000000000000000000000000000000000000000000000000006',
      '0000000000000000000000000000000000000000000000000000000000000280', // relocate of address[] = 640bytes
      '0000000000000000000000000000000000000000000000000000000000000007', // uint256[2]
      '0000000000000000000000000000000000000000000000000000000000000008',
      '0000000000000000000000000000000000000000000000000000000000000003', // string[3]
      '0000000000000000000000000000000000000000000000000000000000000060', // relocate of str[0]
      '00000000000000000000000000000000000000000000000000000000000000a0', // relocate of str[1]
      '00000000000000000000000000000000000000000000000000000000000000e0', // relocate of str[2]
      '0000000000000000000000000000000000000000000000000000000000000003', // str[0], "one"
      '6f6e650000000000000000000000000000000000000000000000000000000000',
      '0000000000000000000000000000000000000000000000000000000000000003', // str[1], "two"
      '74776f0000000000000000000000000000000000000000000000000000000000',
      '0000000000000000000000000000000000000000000000000000000000000005', // str[2], "three"
      '7468726565000000000000000000000000000000000000000000000000000000',
      '0000000000000000000000000000000000000000000000000000000000000000'  // address[0]
    ]);
    expect((r1 as List).length, 4);
    expect(r1[0].length, 3);
    expect(r1[0][0], "one");
    expect(r1[0][1], "two");
    expect(r1[0][2], "three");
    expect(r1[1][0].toInt(), 1);
    expect(r1[1][1].toInt(), 2);
    expect(r1[1][2].toInt(), 3);
    expect(r1[1][3].toInt(), 4);
    expect(r1[1][4].toInt(), 5);
    expect(r1[1][5].toInt(), 6);
    expect(r1[2].length, 0);
    expect(r1[3].length, 2);
    expect(r1[3][0].toInt(), 7);
    expect(r1[3][1].toInt(), 8);
  });

  test('list test', () {
    var r1 = runDecode('address[]', [
      '0000000000000000000000000000000000000000000000000000000000000002',
      '000000000000000000000000d0a1e359811322d97991e03f863a0c30c2cf029c',
      '000000000000000000000000aaf64bfcc32d0f15873a02163e7e500671a4ffcd'
    ]);
    expect((r1 as List).length, 2);
    expect((r1 as List)[1], 'aaf64bfcc32d0f15873a02163e7e500671a4ffcd');

    var r2 = runDecode('address[]', [
      '0000000000000000000000000000000000000000000000000000000000000000'
    ]);
    expect((r2 as List).length, 0);

    var r3 = runDecode('uint256[]', [
      '0000000000000000000000000000000000000000000000000000000000000003',
      '0000000000000000000000000000000000000000000000000000000000000001',
      '0000000000000000000000000000000000000000000000000000000000000002',
      '0000000000000000000000000000000000000000000000000000000000000003'
    ]);

    expect((r3 as List).length, 3);
    expect((r3 as List)[1], BigInt.from(2));

    var r4 = runDecode('address[2]', [
      '000000000000000000000000d0a1e359811322d97991e03f863a0c30c2cf029c',
      '000000000000000000000000aaf64bfcc32d0f15873a02163e7e500671a4ffcd'
    ]);
    expect((r4 as List).length, 2);
    expect((r4 as List)[1], 'aaf64bfcc32d0f15873a02163e7e500671a4ffcd');
  });

  test('relocate test', () {
    // values ([[1, 2], [3]], ["one", "two", "three"])
    var r1 = runDecode('(uint[][],string[])', [
      '0000000000000000000000000000000000000000000000000000000000000040',
      '0000000000000000000000000000000000000000000000000000000000000140',
      '0000000000000000000000000000000000000000000000000000000000000002',
      '0000000000000000000000000000000000000000000000000000000000000040',
      '00000000000000000000000000000000000000000000000000000000000000a0',
      '0000000000000000000000000000000000000000000000000000000000000002',
      '0000000000000000000000000000000000000000000000000000000000000001',
      '0000000000000000000000000000000000000000000000000000000000000002',
      '0000000000000000000000000000000000000000000000000000000000000001',
      '0000000000000000000000000000000000000000000000000000000000000003',
      '0000000000000000000000000000000000000000000000000000000000000003',
      '0000000000000000000000000000000000000000000000000000000000000060',
      '00000000000000000000000000000000000000000000000000000000000000a0',
      '00000000000000000000000000000000000000000000000000000000000000e0',
      '0000000000000000000000000000000000000000000000000000000000000003',
      '6f6e650000000000000000000000000000000000000000000000000000000000',
      '0000000000000000000000000000000000000000000000000000000000000003',
      '74776f0000000000000000000000000000000000000000000000000000000000',
      '0000000000000000000000000000000000000000000000000000000000000005',
      '7468726565000000000000000000000000000000000000000000000000000000'
    ]);
    expect((r1 as List).length, 2);
    expect(r1[0].length, 2);
    expect(r1[1].length, 3);
    expect(r1[0][0].length, 2);
    expect(r1[0][0][0].toInt(), 1);
    expect(r1[0][0][1].toInt(), 2);
    expect(r1[0][1].length, 1);
    expect(r1[0][1][0].toInt(), 3);
    expect(r1[1][0], "one");
    expect(r1[1][1], "two");
    expect(r1[1][2], "three");
  });
}